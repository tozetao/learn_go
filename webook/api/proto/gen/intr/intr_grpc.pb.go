// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: intr.proto

package intrv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InteractionService_View_FullMethodName       = "/intr.v1.InteractionService/View"
	InteractionService_Like_FullMethodName       = "/intr.v1.InteractionService/Like"
	InteractionService_CancelLike_FullMethodName = "/intr.v1.InteractionService/CancelLike"
	InteractionService_Favorite_FullMethodName   = "/intr.v1.InteractionService/Favorite"
	InteractionService_Get_FullMethodName        = "/intr.v1.InteractionService/Get"
	InteractionService_Liked_FullMethodName      = "/intr.v1.InteractionService/Liked"
	InteractionService_Collected_FullMethodName  = "/intr.v1.InteractionService/Collected"
	InteractionService_GetByIDs_FullMethodName   = "/intr.v1.InteractionService/GetByIDs"
)

// InteractionServiceClient is the client API for InteractionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractionServiceClient interface {
	View(ctx context.Context, in *ViewReq, opts ...grpc.CallOption) (*ViewResp, error)
	Like(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeResp, error)
	CancelLike(ctx context.Context, in *CancelLikeReq, opts ...grpc.CallOption) (*CancelLikeResp, error)
	Favorite(ctx context.Context, in *FavoriteReq, opts ...grpc.CallOption) (*FavoriteResp, error)
	// Get 查询bizID的交互数据，以及用户id（uid）对应的交互数据
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	// Liked 用户是否点赞
	Liked(ctx context.Context, in *LikedReq, opts ...grpc.CallOption) (*LikedResp, error)
	// Collected 用户是否收藏
	Collected(ctx context.Context, in *CollectedReq, opts ...grpc.CallOption) (*CollectedResp, error)
	GetByIDs(ctx context.Context, in *GetByIDsReq, opts ...grpc.CallOption) (*GetByIDsResp, error)
}

type interactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionServiceClient(cc grpc.ClientConnInterface) InteractionServiceClient {
	return &interactionServiceClient{cc}
}

func (c *interactionServiceClient) View(ctx context.Context, in *ViewReq, opts ...grpc.CallOption) (*ViewResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewResp)
	err := c.cc.Invoke(ctx, InteractionService_View_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) Like(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeResp)
	err := c.cc.Invoke(ctx, InteractionService_Like_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) CancelLike(ctx context.Context, in *CancelLikeReq, opts ...grpc.CallOption) (*CancelLikeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelLikeResp)
	err := c.cc.Invoke(ctx, InteractionService_CancelLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) Favorite(ctx context.Context, in *FavoriteReq, opts ...grpc.CallOption) (*FavoriteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoriteResp)
	err := c.cc.Invoke(ctx, InteractionService_Favorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResp)
	err := c.cc.Invoke(ctx, InteractionService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) Liked(ctx context.Context, in *LikedReq, opts ...grpc.CallOption) (*LikedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikedResp)
	err := c.cc.Invoke(ctx, InteractionService_Liked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) Collected(ctx context.Context, in *CollectedReq, opts ...grpc.CallOption) (*CollectedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectedResp)
	err := c.cc.Invoke(ctx, InteractionService_Collected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetByIDs(ctx context.Context, in *GetByIDsReq, opts ...grpc.CallOption) (*GetByIDsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIDsResp)
	err := c.cc.Invoke(ctx, InteractionService_GetByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionServiceServer is the server API for InteractionService service.
// All implementations must embed UnimplementedInteractionServiceServer
// for forward compatibility.
type InteractionServiceServer interface {
	View(context.Context, *ViewReq) (*ViewResp, error)
	Like(context.Context, *LikeReq) (*LikeResp, error)
	CancelLike(context.Context, *CancelLikeReq) (*CancelLikeResp, error)
	Favorite(context.Context, *FavoriteReq) (*FavoriteResp, error)
	// Get 查询bizID的交互数据，以及用户id（uid）对应的交互数据
	Get(context.Context, *GetReq) (*GetResp, error)
	// Liked 用户是否点赞
	Liked(context.Context, *LikedReq) (*LikedResp, error)
	// Collected 用户是否收藏
	Collected(context.Context, *CollectedReq) (*CollectedResp, error)
	GetByIDs(context.Context, *GetByIDsReq) (*GetByIDsResp, error)
	mustEmbedUnimplementedInteractionServiceServer()
}

// UnimplementedInteractionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInteractionServiceServer struct{}

func (UnimplementedInteractionServiceServer) View(context.Context, *ViewReq) (*ViewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedInteractionServiceServer) Like(context.Context, *LikeReq) (*LikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedInteractionServiceServer) CancelLike(context.Context, *CancelLikeReq) (*CancelLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLike not implemented")
}
func (UnimplementedInteractionServiceServer) Favorite(context.Context, *FavoriteReq) (*FavoriteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Favorite not implemented")
}
func (UnimplementedInteractionServiceServer) Get(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedInteractionServiceServer) Liked(context.Context, *LikedReq) (*LikedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liked not implemented")
}
func (UnimplementedInteractionServiceServer) Collected(context.Context, *CollectedReq) (*CollectedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collected not implemented")
}
func (UnimplementedInteractionServiceServer) GetByIDs(context.Context, *GetByIDsReq) (*GetByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIDs not implemented")
}
func (UnimplementedInteractionServiceServer) mustEmbedUnimplementedInteractionServiceServer() {}
func (UnimplementedInteractionServiceServer) testEmbeddedByValue()                            {}

// UnsafeInteractionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionServiceServer will
// result in compilation errors.
type UnsafeInteractionServiceServer interface {
	mustEmbedUnimplementedInteractionServiceServer()
}

func RegisterInteractionServiceServer(s grpc.ServiceRegistrar, srv InteractionServiceServer) {
	// If the following call pancis, it indicates UnimplementedInteractionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InteractionService_ServiceDesc, srv)
}

func _InteractionService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_View_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).View(ctx, req.(*ViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_Like_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).Like(ctx, req.(*LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_CancelLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).CancelLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_CancelLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).CancelLike(ctx, req.(*CancelLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_Favorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).Favorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_Favorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).Favorite(ctx, req.(*FavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_Liked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).Liked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_Liked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).Liked(ctx, req.(*LikedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_Collected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).Collected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_Collected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).Collected(ctx, req.(*CollectedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetByIDs(ctx, req.(*GetByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InteractionService_ServiceDesc is the grpc.ServiceDesc for InteractionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InteractionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "intr.v1.InteractionService",
	HandlerType: (*InteractionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "View",
			Handler:    _InteractionService_View_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _InteractionService_Like_Handler,
		},
		{
			MethodName: "CancelLike",
			Handler:    _InteractionService_CancelLike_Handler,
		},
		{
			MethodName: "Favorite",
			Handler:    _InteractionService_Favorite_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _InteractionService_Get_Handler,
		},
		{
			MethodName: "Liked",
			Handler:    _InteractionService_Liked_Handler,
		},
		{
			MethodName: "Collected",
			Handler:    _InteractionService_Collected_Handler,
		},
		{
			MethodName: "GetByIDs",
			Handler:    _InteractionService_GetByIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "intr.proto",
}
