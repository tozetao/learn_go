// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"learn_go/webook/interaction/event/article"
	"learn_go/webook/interaction/grpc"
	"learn_go/webook/interaction/ioc"
	"learn_go/webook/interaction/repository"
	"learn_go/webook/interaction/repository/cache"
	"learn_go/webook/interaction/repository/dao"
	"learn_go/webook/interaction/service"
)

// Injectors from wire.go:

func InitApp() *App {
	config := ioc.NewSaramaConfig()
	client := ioc.NewConsumerClient(config)
	loggerV2 := ioc.NewLogger()
	db := ioc.NewDB(loggerV2)
	interactionDao := dao.NewInteractionDao(db)
	cmdable := ioc.NewRedis(loggerV2)
	interactionCache := cache.NewInteractionCache(cmdable)
	interactionRepository := repository.NewInteractionRepository(interactionDao, interactionCache)
	batchReadEventConsumer := article.NewBatchReadEventConsumer(client, interactionRepository, loggerV2)
	v := ioc.NewConsumers(batchReadEventConsumer)
	interactionService := service.NewInteractionService(interactionRepository)
	interactionServiceServer := grpc.NewInteractionServiceServer(interactionService)
	server := ioc.InitGRPCServer(interactionServiceServer)
	app := &App{
		consumers: v,
		server:    server,
	}
	return app
}

// wire.go:

// 第三方依赖
var thirdPartySet = wire.NewSet(ioc.NewLogger, ioc.NewDB, ioc.NewRedis, ioc.NewSaramaConfig, ioc.NewConsumerClient)

var interactionSvcSet = wire.NewSet(service.NewInteractionService, repository.NewInteractionRepository, dao.NewInteractionDao, cache.NewInteractionCache)
