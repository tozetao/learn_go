// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	repository2 "learn_go/webook/interaction/repository"
	cache2 "learn_go/webook/interaction/repository/cache"
	dao2 "learn_go/webook/interaction/repository/dao"
	service2 "learn_go/webook/interaction/service"
	article2 "learn_go/webook/internal/event/article"
	"learn_go/webook/internal/repository"
	"learn_go/webook/internal/repository/article"
	"learn_go/webook/internal/repository/cache"
	"learn_go/webook/internal/repository/dao"
	"learn_go/webook/internal/service"
	"learn_go/webook/internal/web"
	"learn_go/webook/ioc"
)

import (
	_ "github.com/spf13/viper/remote"
)

// Injectors from wire.go:

func InitApp(templateId string) *App {
	loggerV2 := ioc.NewLogger()
	cmdable := ioc.NewRedis(loggerV2)
	jwtHandler := web.NewJWTHandler(cmdable)
	v := ioc.InitMiddlewares(jwtHandler, loggerV2)
	smsService := ioc.NewSMSService()
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	codeService := service.NewCodeService(templateId, smsService, codeRepository)
	smsHandler := web.NewSMSHandler(codeService)
	db := ioc.NewDB(loggerV2)
	userDao := dao.NewUserDao(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDao, userCache)
	userService := service.NewUserService(userRepository, loggerV2)
	userHandler := web.NewUserHandler(userService, codeService, jwtHandler)
	oAuth2Service := ioc.InitOAuth2Service()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(oAuth2Service, userService, jwtHandler)
	engine := ioc.InitGin(v, smsHandler, userHandler, oAuth2WechatHandler)
	articleDao := dao.NewArticleDao(db)
	articleCache := cache.NewArticleCache(cmdable)
	articleRepository := article.NewArticleRepository(articleDao, articleCache, userRepository, loggerV2)
	authorRepository := article.NewArticleAuthorRepository()
	readerRepository := article.NewArticleReaderRepository()
	config := ioc.NewSaramaConfig()
	syncProducer := ioc.NewSyncProducer(config)
	producer := article2.NewSyncProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, authorRepository, readerRepository, producer, loggerV2)
	interactionDao := dao2.NewInteractionDao(db)
	interactionCache := cache2.NewInteractionCache(cmdable)
	interactionRepository := repository2.NewInteractionRepository(interactionDao, interactionCache)
	interactionService := service2.NewInteractionService(interactionRepository)
	interactionServiceClient := ioc.NewGRPCInteractionServiceClient(interactionService)
	redisRanking := ioc.NewRedisRanking(cmdable)
	localCacheRanking := ioc.NewLocalCacheRanking()
	rankingRepository := repository.NewRankingRepository(redisRanking, localCacheRanking)
	rankingService := service.NewRankingService(articleService, interactionServiceClient, rankingRepository)
	rankingJob := ioc.InitRankingJob(rankingService)
	cron := ioc.InitCron(loggerV2, rankingJob)
	app := &App{
		server: engine,
		cron:   cron,
	}
	return app
}

// wire.go:

var rankingSet = wire.NewSet(service.NewRankingService, repository.NewRankingRepository, ioc.NewRedisRanking, ioc.NewLocalCacheRanking)

// 第三方依赖
var thirdPartySet = wire.NewSet(ioc.NewLogger, ioc.NewDB, ioc.NewRedis, ioc.InitMiddlewares, ioc.InitGin)

var jobSet = wire.NewSet(ioc.InitRankingJob, ioc.InitCron)

// 生产者
var producerSet = wire.NewSet(ioc.NewSaramaConfig, ioc.NewSyncProducer, article2.NewSyncProducer)

var articleSet = wire.NewSet(web.NewArticleHandler, service.NewArticleService, article.NewArticleRepository, article.NewArticleAuthorRepository, article.NewArticleReaderRepository, dao.NewArticleDao, cache.NewArticleCache, service2.NewInteractionService, repository2.NewInteractionRepository, dao2.NewInteractionDao, cache2.NewInteractionCache, ioc.NewGRPCInteractionServiceClient)

var smsSet = wire.NewSet(web.NewSMSHandler, service.NewCodeService, ioc.NewSMSService, repository.NewCodeRepository, cache.NewCodeCache)

var userSet = wire.NewSet(web.NewUserHandler, service.NewUserService, repository.NewUserRepository, cache.NewUserCache, dao.NewUserDao)

var wechatSet = wire.NewSet(web.NewOAuth2WechatHandler, ioc.InitOAuth2Service, web.NewJWTHandler)

var (
	providers = wire.NewSet(
		thirdPartySet,
		producerSet,
		jobSet,

		rankingSet,
		articleSet,
		smsSet,
		userSet,
		wechatSet, web.NewTestHandler, wire.Struct(new(App), "*"),
	)
)
