// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	article3 "learn_go/webook/interaction/event/article"
	repository2 "learn_go/webook/interaction/repository"
	cache2 "learn_go/webook/interaction/repository/cache"
	dao2 "learn_go/webook/interaction/repository/dao"
	service2 "learn_go/webook/interaction/service"
	"learn_go/webook/internal/event/article"
	"learn_go/webook/internal/repository"
	article2 "learn_go/webook/internal/repository/article"
	"learn_go/webook/internal/repository/cache"
	"learn_go/webook/internal/repository/dao"
	"learn_go/webook/internal/service"
	"learn_go/webook/internal/web"
	"learn_go/webook/ioc"
)

import (
	_ "github.com/spf13/viper/remote"
)

// Injectors from wire.go:

func InitApp(templateId string) *App {
	loggerV2 := ioc.NewLogger()
	cmdable := ioc.NewRedis(loggerV2)
	jwtHandler := web.NewJWTHandler(cmdable)
	v := ioc.InitMiddlewares(jwtHandler, loggerV2)
	smsService := ioc.InitSMSService()
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	codeService := service.NewCodeService(templateId, smsService, codeRepository)
	smsHandler := web.NewSMSHandler(codeService)
	db := ioc.NewDB(loggerV2)
	userDao := dao.NewUserDao(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDao, userCache)
	userService := service.NewUserService(userRepository, loggerV2)
	userHandler := web.NewUserHandler(userService, codeService, jwtHandler)
	oAuth2Service := ioc.InitOAuth2Service()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(oAuth2Service, userService, jwtHandler)
	engine := ioc.InitGin(v, smsHandler, userHandler, oAuth2WechatHandler)
	config := ioc.NewSaramaConfig()
	client := ioc.NewConsumerClient(config)
	interactionDao := dao2.NewInteractionDao(db)
	interactionCache := cache2.NewInteractionCache(cmdable)
	interactionRepository := repository2.NewInteractionRepository(interactionDao, interactionCache)
	batchReadEventConsumer := article3.NewBatchReadEventConsumer(client, interactionRepository, loggerV2)
	v2 := ioc.NewConsumers(batchReadEventConsumer)
	articleDao := dao.NewArticleDao(db)
	articleCache := cache.NewArticleCache(cmdable)
	articleRepository := article2.NewArticleRepository(articleDao, articleCache, userRepository, loggerV2)
	authorRepository := article2.NewArticleAuthorRepository()
	readerRepository := article2.NewArticleReaderRepository()
	syncProducer := ioc.NewSyncProducer(config)
	producer := article.NewSyncProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, authorRepository, readerRepository, producer, loggerV2)
	interactionService := service2.NewInteractionService(interactionRepository)
	rankingCache := cache.NewRankingCache(cmdable)
	rankingRepository := repository.NewRankingRepository(rankingCache)
	rankingService := service.NewRankingService(articleService, interactionService, rankingRepository)
	rankingJob := ioc.InitRankingJob(rankingService)
	cron := ioc.InitCron(loggerV2, rankingJob)
	app := &App{
		server:    engine,
		consumers: v2,
		cron:      cron,
	}
	return app
}

// wire.go:

var rankingSet = wire.NewSet(service.NewRankingService, repository.NewRankingRepository, cache.NewRankingCache)

var (
	providers = wire.NewSet(ioc.NewLogger, ioc.NewDB, ioc.NewRedis, ioc.InitMiddlewares, ioc.InitGin, ioc.InitSMSService, ioc.InitOAuth2Service, rankingSet, ioc.InitRankingJob, ioc.InitCron, ioc.NewSaramaConfig, ioc.NewConsumerClient, article3.NewBatchReadEventConsumer, ioc.NewConsumers, ioc.NewSyncProducer, article.NewSyncProducer, web.NewSMSHandler, web.NewUserHandler, web.NewOAuth2WechatHandler, web.NewJWTHandler, web.NewArticleHandler, web.NewTestHandler, service.NewCodeService, service.NewUserService, service.NewArticleService, service2.NewInteractionService, repository2.NewInteractionRepository, repository.NewCodeRepository, repository.NewUserRepository, article2.NewArticleRepository, article2.NewArticleReaderRepository, article2.NewArticleAuthorRepository, dao.NewUserDao, dao2.NewInteractionDao, dao.NewArticleDao, cache.NewArticleCache, cache.NewCodeCache, cache.NewUserCache, cache2.NewInteractionCache, wire.Struct(new(App), "*"))
)
